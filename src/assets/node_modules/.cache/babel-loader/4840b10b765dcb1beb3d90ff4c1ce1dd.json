{"ast":null,"code":"// pass in a manifest with a 'bin' field here, and it'll turn it\n// into a properly santized bin object\nconst _require = require('path'),\n      join = _require.join,\n      basename = _require.basename;\n\nconst normalize = pkg => !pkg.bin ? removeBin(pkg) : typeof pkg.bin === 'string' ? normalizeString(pkg) : Array.isArray(pkg.bin) ? normalizeArray(pkg) : typeof pkg.bin === 'object' ? normalizeObject(pkg) : removeBin(pkg);\n\nconst normalizeString = pkg => {\n  if (!pkg.name) return removeBin(pkg);\n  pkg.bin = {\n    [pkg.name]: pkg.bin\n  };\n  return normalizeObject(pkg);\n};\n\nconst normalizeArray = pkg => {\n  pkg.bin = pkg.bin.reduce((acc, k) => {\n    acc[basename(k)] = k;\n    return acc;\n  }, {});\n  return normalizeObject(pkg);\n};\n\nconst removeBin = pkg => {\n  delete pkg.bin;\n  return pkg;\n};\n\nconst normalizeObject = pkg => {\n  const orig = pkg.bin;\n  const clean = {};\n  let hasBins = false;\n  Object.keys(orig).forEach(binKey => {\n    const base = join('/', basename(binKey.replace(/\\\\|:/g, '/'))).substr(1);\n    if (typeof orig[binKey] !== 'string' || !base) return;\n    const binTarget = join('/', orig[binKey]).replace(/\\\\/g, '/').substr(1);\n    if (!binTarget) return;\n    clean[base] = binTarget;\n    hasBins = true;\n  });\n  if (hasBins) pkg.bin = clean;else delete pkg.bin;\n  return pkg;\n};\n\nmodule.exports = normalize;","map":null,"metadata":{},"sourceType":"script"}